@page "/product"
@using Study.Services
@using Study.Data
@using BlazorInputFile
@using System.IO
@inherits OwningComponentBase<ProductService>

@if (products == null)
{
    <p><em>Loading or no products exist</em></p>
}
else
{
    <div class="container border p-3">
        <div class="row">
            <div class="col-5">
                <h3 class="text-info">
                    Product List
                </h3>
            </div>
            <div class="col-3">
                <button class="btn btn-info form-control" @onclick="AddNewProduct">
                    Add New Product
                </button>
            </div>
        </div>
        <div class="row pt-4">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Price</th>
                        <th>Shade Color</th>
                        <th>Category</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prod in products)
                    {
                    <tr>
                        <td>@prod.Name</td>
                        <td>@prod.Price</td>
                        <td>@prod.ShadeColor</td>
                        <td>@prod.Category.Name</td>
                        <td>
                            <button class="btn btn-primary" style="width:150px" @onclick="(()=> EditProduct(prod))">Edit</button>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

}

@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <EditForm Model="@prod" OnValidSubmit="@ValidSubmit">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="text-info">@(prod.Id > 0 ? "Update Category" : "Create Catetory")</h3>
                        <button type="button" class="close" @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <ValidationSummary></ValidationSummary>
                        <div class="row">
                            <div class="col-9">
                                <div class="row py-2">
                                    <div class="col-4">
                                        Category Name
                                    </div>
                                    <div class="col-8">
                                        <select @onchange="CategorySelectionChanged" class="form-control">
                                            @foreach(var cat in categories)
                                            {
                                                <option value="@cat.Id"  selected="@(cat.Id == prod.Id?  true:false)">@cat.Name</option> 
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Product Name
                                    </div>
                                    <div class="col-8">
                                        <input class="form-control" type="text" @bind="prod.Name" />
                                        <ValidationMessage For="@(()=>prod.Name)"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Price
                                    </div>
                                    <div class="col-8">
                                        <input class="form-control" type="text" @bind="prod.Price" />
                                        <ValidationMessage For="@(()=>prod.Price)"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Shade Color
                                    </div>
                                    <div class="col-8">
                                        <input class="form-control" type="text" @bind="prod.ShadeColor" />
                                    </div>
                                </div>
                                <div class="row py-2">
                                    <div class="col-4">
                                        Image
                                    </div>
                                    <div class="col-8">
       
                                        <InputFile OnChange="HandleSelection"></InputFile>
                                    </div>
                                </div>
                                <div class="row py-2">

                                    <div class="offset-4 col">
                                        <button class="btn btn-primary form-control" type="submit">Submit</button>
                                    </div>
                                    @if (prod.Id > 0)
                                    {
                                        <div class="col">
                                            <button class="btn btn-danger form-control"
                                                    @onclick="DeleteProduct"
                                                    type="submit">
                                                Delete
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-3">
                                <img  src="@ConvertImageToDisplay(prod.Image)" width="100%" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}
@code {

    List<Category> categories;
    List<Product> products;
    bool ShowPopup = false;
    Product prod = new Product();
    public byte[] ImageUploaded { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        products = Service.GetProducts();
    }

    void AddNewProduct()
    {
        prod = new Product();
        categories = Service.GetcategoryList();
        prod.CategoryId = categories.ToList()[0].Id;


        prod.Id = 0;
        ShowPopup = true;
    }


    void DeleteProduct()
    {

        ShowPopup = false;
        var result = Service.DeleteProduct(prod);
        products.Clear();
        products = Service.GetProducts();
    }


    void EditProduct(Product p)
    {
        prod = p;
        //cat.Id = 0;
        categories = Service.GetcategoryList();
        ShowPopup = true;
    }
    void ClosePopup()
    {
        ShowPopup = false;
    }

    void ValidSubmit()
    {
        var result = false;
        ShowPopup = false;

        if(ImageUploaded!=null)
        {
            prod.Image = ImageUploaded;
            ImageUploaded = null;
        }
        if (prod.Id > 0)
        {
            result = Service.UpdateProduct(prod);
        }
        else
        {

            result = Service.CreateProduct(prod);


        }
        products = Service.GetProducts();
    }

    async  Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if(file !=null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImageUploaded = ms.ToArray();

        }
    }

    string ConvertImageToDisplay(byte[] image)
    {
        if(image!=null)
        {
            var  base64 = Convert.ToBase64String(image);
            var finalStr = string.Format("data:image/jpg;base64,{0}", base64);
            return finalStr;

        }

        return "";
    }

    void CategorySelectionChanged(ChangeEventArgs e)
    {
        if(int.TryParse(e.Value.ToString(), out int id))
        {
            prod.Id = id;
        }
    }
}
